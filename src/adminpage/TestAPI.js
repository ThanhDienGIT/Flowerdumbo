import React, { useState } from 'react';
import { Upload, Button, message, Image, Modal, Input, Card, Space, Row, Col, Progress } from 'antd';
import { UploadOutlined, EditOutlined, DeleteOutlined, CloudUploadOutlined, CloseCircleOutlined, InboxOutlined } from '@ant-design/icons';
import axios from 'axios';

// --- QUAN TR·ªåNG: D√°n th√¥ng tin Cloudinary c·ªßa b·∫°n v√†o ƒë√¢y ---
const CLOUDINARY_CLOUD_NAME = 'FlowerKey'; // Thay b·∫±ng Cloud Name c·ªßa b·∫°n
const CLOUDINARY_UPLOAD_PRESET = 'ml_default'; // THAY B·∫∞NG T√äN PRESET "UNSIGNED" C·ª¶A B·∫†N

// --- X√≥a d√≤ng n√†y ƒëi, kh√¥ng c·∫ßn API_KEY cho unsigned upload ---
// const CLOUDINARY_API_KEY = 'YOUR_API_KEY';

function TestAPI() {
    // State l∆∞u danh s√°ch ·∫£nh ƒë√£ upload th√†nh c√¥ng
    const [imageList, setImageList] = useState([]);
    // State cho M·∫¢NG file ƒë∆∞·ª£c ch·ªçn v√† M·∫¢NG ·∫£nh xem tr∆∞·ªõc
    const [filesToUpload, setFilesToUpload] = useState([]);
    const [previewImages, setPreviewImages] = useState([]);
    // State loading cho n√∫t upload v√† ti·∫øn tr√¨nh
    const [uploading, setUploading] = useState(false);
    const [uploadProgress, setUploadProgress] = useState(0);

    // State cho vi·ªác s·ª≠a/x√≥a (gi·ªØ nguy√™n)
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [editingImage, setEditingImage] = useState(null);
    const [newPublicId, setNewPublicId] = useState('');

    // --- X·ª≠ l√Ω tr∆∞·ªõc khi upload (h·ªó tr·ª£ nhi·ªÅu file) ---
    const handleBeforeUpload = (file, fileList) => {
        // T·∫°o m·ªôt m·∫£ng promises ƒë·ªÉ ƒë·ªçc t·∫•t c·∫£ c√°c file
        const previewPromises = fileList.map(f => {
            return new Promise((resolve, reject) => {
                // Ki·ªÉm tra file ·∫£nh
                if (!f.type.startsWith('image/')) {
                    message.error(`T·ªáp ${f.name} kh√¥ng ph·∫£i l√† ·∫£nh!`);
                    reject();
                    return;
                }
                const reader = new FileReader();
                reader.readAsDataURL(f);
                reader.onload = () => resolve(reader.result);
                reader.onerror = error => reject(error);
            });
        });

        // ƒê·ª£i t·∫•t c·∫£ file ƒë∆∞·ª£c ƒë·ªçc xong
        Promise.all(previewPromises)
            .then(previews => {
                setFilesToUpload(fileList);
                setPreviewImages(previews);
            })
            .catch(error => {
                console.error("L·ªói khi t·∫°o ·∫£nh xem tr∆∞·ªõc:", error);
            });

        // Ch·∫∑n antd t·ª± ƒë·ªông upload
        return false;
    };

    // --- X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t Upload (cho nhi·ªÅu ·∫£nh) ---
    const handleConfirmUpload = async () => {
        if (filesToUpload.length === 0) {
            message.warning('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ·∫£nh ƒë·ªÉ t·∫£i l√™n.');
            return;
        }

        setUploading(true);
        setUploadProgress(0);

        let uploadedCount = 0;
        // D√πng v√≤ng l·∫∑p for...of ƒë·ªÉ upload tu·∫ßn t·ª±
        for (const file of filesToUpload) {
            const formData = new FormData();
            formData.append('file', file);
            formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);

            try {
                const res = await axios.post(
                    `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`,
                    formData,
                    { headers: { 'Content-Type': 'multipart/form-data' } }
                );
                // Th√™m ·∫£nh m·ªõi v√†o danh s√°ch ƒë√£ upload
                setImageList(prevList => [...prevList, res.data]);
            } catch (err) {
                console.error(`L·ªói khi upload t·ªáp ${file.name}:`, err);
                message.error(`T·∫£i ·∫£nh "${file.name}" th·∫•t b·∫°i.`);
                // N·∫øu c√≥ l·ªói, d·ª´ng qu√° tr√¨nh upload
                setUploading(false);
                return;
            }
            uploadedCount++;
            // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
            setUploadProgress(Math.round((uploadedCount / filesToUpload.length) * 100));
        }

        message.success(`ƒê√£ t·∫£i l√™n th√†nh c√¥ng ${filesToUpload.length} ·∫£nh!`);
        // Reset tr·∫°ng th√°i xem tr∆∞·ªõc
        handleCancelPreview();
        setUploading(false);
    };

    // --- H√†m h·ªßy, x√≥a ·∫£nh xem tr∆∞·ªõc ---
    const handleCancelPreview = () => {
        setFilesToUpload([]);
        setPreviewImages([]);
    };

    // C√°c h√†m x√≥a v√† s·ª≠a gi·ªØ nguy√™n
    const handleDelete = (publicId) => {
        Modal.confirm({
            title: 'B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ·∫£nh n√†y?',
            content: 'H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.',
            okText: 'X√≥a', okType: 'danger', cancelText: 'H·ªßy',
            onOk: () => message.error("X√≥a th·∫•t b·∫°i: Ch·ª©c nƒÉng n√†y y√™u c·∫ßu backend."),
        });
    };

    const showEditModal = (image) => {
        setEditingImage(image);
        setNewPublicId(image.public_id);
        setIsEditModalVisible(true);
    };

    const handleEdit = () => {
        message.error("S·ª≠a th·∫•t b·∫°i: Ch·ª©c nƒÉng n√†y y√™u c·∫ßu backend.");
        setIsEditModalVisible(false);
    };

    return (
        <div style={{ padding: '30px' }}>
            <h2>Qu·∫£n l√Ω nhi·ªÅu ·∫£nh Cloudinary üöÄ</h2>

            <Card title="1. Ch·ªçn v√† T·∫£i ·∫£nh l√™n">
                {previewImages.length === 0 ? (
                    <Upload.Dragger
                        accept="image/*"
                        beforeUpload={handleBeforeUpload}
                        multiple
                        showUploadList={false}
                    >
                        <p className="ant-upload-drag-icon"><InboxOutlined /></p>
                        <p className="ant-upload-text">Nh·∫•n ho·∫∑c k√©o th·∫£ file v√†o khu v·ª±c n√†y</p>
                        <p className="ant-upload-hint">H·ªó tr·ª£ ch·ªçn nhi·ªÅu file c√πng l√∫c.</p>
                    </Upload.Dragger>
                ) : (
                    <div>
                        <h4>Xem tr∆∞·ªõc ({previewImages.length} ·∫£nh):</h4>
                        <Row gutter={[16, 16]}>
                            {previewImages.map((src, index) => (
                                <Col key={index}>
                                    <Image width={120} src={src} />
                                </Col>
                            ))}
                        </Row>
                        <Space style={{ marginTop: '20px' }}>
                            <Button
                                type="primary"
                                icon={<CloudUploadOutlined />}
                                onClick={handleConfirmUpload}
                                loading={uploading}
                                disabled={uploading}
                            >
                                {uploading ? `ƒêang t·∫£i... ${uploadProgress}%` : `T·∫£i l√™n ${filesToUpload.length} ·∫£nh`}
                            </Button>
                            <Button icon={<CloseCircleOutlined />} onClick={handleCancelPreview} danger disabled={uploading}>
                                H·ªßy
                            </Button>
                        </Space>
                        {uploading && <Progress percent={uploadProgress} style={{ marginTop: '10px' }} />}
                    </div>
                )}
            </Card>

            <hr style={{ margin: '20px 0' }} />

            <h3>2. C√°c ·∫£nh ƒë√£ t·∫£i l√™n</h3>
            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '16px' }}>
                {imageList.length > 0 ? (
                    imageList.map(image => (
                        <Card
                            key={image.public_id}
                            hoverable
                            style={{ width: 220 }}
                            cover={<Image alt={image.public_id} src={image.secure_url} style={{ objectFit: 'cover', height: 180 }} />}
                            actions={[
                                <EditOutlined key="edit" onClick={() => showEditModal(image)} />,
                                <DeleteOutlined key="delete" onClick={() => handleDelete(image.public_id)} />,
                            ]}
                        >
                            <Card.Meta title={<span style={{fontSize: '12px', wordBreak: 'break-all'}}>{image.public_id}</span>} />
                        </Card>
                    ))
                ) : ( <p>Ch∆∞a c√≥ ·∫£nh n√†o ƒë∆∞·ª£c t·∫£i l√™n.</p> )}
            </div>

            <Modal
                title="ƒê·ªïi t√™n ·∫£nh"
                visible={isEditModalVisible}
                onOk={handleEdit}
                onCancel={() => setIsEditModalVisible(false)}
            >
                <p>Public ID hi·ªán t·∫°i: {editingImage?.public_id}</p>
                <Input
                    value={newPublicId}
                    onChange={(e) => setNewPublicId(e.target.value)}
                    placeholder="Nh·∫≠p Public ID m·ªõi"
                />
            </Modal>
        </div>
    );
}

export default TestAPI;